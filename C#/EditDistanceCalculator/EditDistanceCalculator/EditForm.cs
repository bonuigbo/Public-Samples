using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace EditDistanceCalculator
{
    /*
            Manages the project interface. Most is autogenerated by C#
     */
    public partial class EditForm : Form
    {
        #region Members

        private const string WORD1STRING = "Word 1: ";
        private const string WORD2STRING = "Word 2: ";
        private const string EDITSTRING = "Edit Distance: ";
        private DistanceCalculator calculator;

        #endregion Members

        #region Methods

        public EditForm()
        {
            InitializeComponent();
        }

        /*
                Calls the calcuator to do the computations, then grabs any necessary
                data to display on the screen
         */
        private void calculateButton_Click(object sender, EventArgs e)
        {
            calculator = new DistanceCalculator(string1TextBox.Text.ToLower(), string2TextBox.Text.ToLower());
            this.editDataGridView.DataSource = ConvertToDataTable(calculator.EditMatrix);
            this.alignDataGridView.DataSource = ConvertToDataTable(calculator.Alignment);
            ReInitializeDisplay();
        }

        /*
                For handling interface related tasks
         */
        private void ReInitializeDisplay()
        {

            this.word1Label.Text = WORD1STRING + this.string1TextBox.Text;            
            this.word2Label.Text = WORD2STRING + this.string2TextBox.Text;
            this.editDistanceLabel.Text = EDITSTRING + calculator.EditDistance.ToString();
            // Uses the indices to color in the alignment grid
            foreach (var coordinate in calculator.AlignmentVertices)
            {
                this.editDataGridView.Rows[coordinate[0]+1].Cells[coordinate[1]+1].Style.BackColor = Color.LightSteelBlue;
            }
            
            this.word1Label.Visible = true;
            this.word2Label.Visible = true;
            this.editDataGridView.ColumnHeadersVisible = false;
            this.editDataGridView.RowHeadersVisible = false;
            this.editDistanceLabel.Visible = true;
            this.editDataGridView.Visible = true;
            this.alignDataGridView.ColumnHeadersVisible = false;
            this.alignDataGridView.RowHeadersVisible = false;
            this.alignDataGridView.Visible = true;
            this.alignmentLabel.Visible = true;
        }

        /*
                The next two methods are for converting the calculated
                matrices into a form displayable on the interface
         */
        private DataTable ConvertToDataTable(int[,] editMatrix)
        {
            string input1 = string1TextBox.Text;
            string input2 = string2TextBox.Text;
            DataTable table = new DataTable("Edit Matrix");
            for (int i = 0; i < input2.Length + 2; i++)
            {
                table.Columns.Add(i.ToString(), typeof(string));
            }
            for (int i = 0; i < input1.Length + 2; i++)
            {
                List<string> row = new List<string>();
                for (int j = 0; j < input2.Length + 2; j++)
                {
                    if (i == 0)
                    {
                        if (j > 1)
                        {
                            row.Add(input2[j - 2].ToString());
                        }
                        else
                        {
                            row.Add(" ");
                        }
                    }
                    else
                    {
                        if (j == 0)
                        {
                            if (i == 1)
                            {
                                row.Add(" ");
                            }
                            else
                                row.Add(input1[i - 2].ToString());
                        }
                        else
                            row.Add(editMatrix[i - 1, j - 1].ToString());
                    }
                }
                table.Rows.Add(row.ToArray());
            }
            return table;
        }

        private DataTable ConvertToDataTable(List<string> alignment)
        {
            DataTable table = new DataTable("Edit Alignment");
            for (int i = 0; i < alignment[0].Length; i++)
            {
                table.Columns.Add(i.ToString(), typeof(string));
            }
            for (int i = 0; i < alignment.Count; i++)
            {
                List<string> currentRow = new List<string>();
                foreach (char letter in alignment[i])
                {
                    currentRow.Add(letter.ToString());
                }
                table.Rows.Add(currentRow.ToArray());
            }
            return table;
        }

        #endregion Methods
    }
}
